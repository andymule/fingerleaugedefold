local M = {}

-- Import the global settings
local settings = require("main.game_settings")

function init(self)
    -- Initial properties
    -- Base force multiplier applied to movement (higher = faster acceleration)
    self.force_strength = 6
    -- Maximum force that can be applied to prevent excessive speeds
    self.max_force = 500
    -- Tracks whether the ball is currently being controlled by input
    self.input_active = false
    
    -- Track current mouse/touch position
    self.current_pointer_pos = vmath.vector3(0, 0, 0)
    
    -- Store initial position
    self.start_pos = go.get_position()
    
    -- Enable input for this game object
    msg.post(".", "acquire_input_focus")
    
    -- Enable physics messages for collisions
    msg.post(".", "acquire_input_focus")
    msg.post("#collisionobject", "enable")
    
    print("Ball initialized with physics")
end

function on_reload(self)
    print("reloaded!")
end

function final(self)
    -- Release input focus when the script is finalized
    msg.post(".", "release_input_focus")
end

function update(self, dt)
    -- If input is active, apply forces toward finger position
    if self.input_active and self.current_pointer_pos then
        -- Calculate direction vector to target
        local my_pos = go.get_position()
        local dir = self.current_pointer_pos - my_pos
        local distance = vmath.length(dir)
        
        -- Only apply force if we're not already at the target
        if distance > 10 then
            -- Normalize direction and apply force
            dir = vmath.normalize(dir)
            
            -- Scale force by distance (stronger when further away)
            local force_magnitude = math.min(self.force_strength * distance, self.max_force)
            local force = dir * force_magnitude
            
            -- Apply the force to the physics object
            msg.post("#collisionobject", "apply_force", {force = force, position = go.get_world_position()})
            
            -- Add debug markers along the path if enabled (only occasionally)
            if settings.render_click_points and math.random() < 0.05 then
                factory.create("#marker_factory", self.current_pointer_pos)
            end
        end
    end
end

function on_input(self, action_id, action)
    -- Always track the current pointer position on any touch/mouse event
    if action_id == hash("touch") then
        -- Update current pointer position
        self.current_pointer_pos = vmath.vector3(action.x, action.y, 0)
        
        -- Touch/click started
        if action.pressed then
            self.input_active = true
            
            -- Only spawn debug marker if setting is enabled
            if settings.render_click_points then
                factory.create("#marker_factory", self.current_pointer_pos)
            end
            
        -- Touch/click ended
        elseif action.released then
            self.input_active = false
            -- Physics will maintain momentum automatically
        end
        
        return true
    end
    
    -- Add a reset key (R) to move the ball back to start position
    if action_id == hash("key_r") and action.pressed then
        go.set_position(self.start_pos)
        physics.set_linear_velocity("#collisionobject", vmath.vector3(0, 0, 0))
        physics.set_angular_velocity("#collisionobject", 0)
        return true
    end
    
    return false
end

-- Handle collision events
function on_message(self, message_id, message, sender)
    if message_id == hash("collision_response") then
        -- Here you can handle collisions with other objects
        print("Ball collided with:", message.other_id)
    end
end

return M 